import React, { useReducer } from 'react';
import GithubContext from './GithubContext';
import githubReducer from './githubReducer';
import axios from 'axios';

axios.defaults.baseURL = 'https://api.github.com';

const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;
const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;

const url = (url) => `${url}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`;

function GithubState({ children }) {

    const initialState = {
        isLoading: false,
        user: {},
        users: [],
        repositories: [],
    };

    const [state, dispatch] = useReducer(githubReducer, initialState);

    const search = async (value) => {

        dispatch({
            type: 'SEARCH_USERS_REQUEST',
        });

        try {
            const response = await axios.get(
                url(`/search/users?q=${value}&`),
            );

            dispatch({
                type: 'SEARCH_USERS_SUCCESS',
                payload: response.data.items,
            });
        } catch (error) {
            dispatch({
                type: 'SEARCH_USERS_FAILURE',
                payload: error,
            });
        }

    };

    const getUser = async (username) => {

        dispatch({
            type: 'FETCH_USER_REQUEST',
        });

        try {
            const response = await axios.get(
                url(`/users/${username}?`),
            );

            dispatch({
                type: 'FETCH_USER_SUCCESS',
                payload: response.data,
            });
        } catch (error) {
            dispatch({
                type: 'FETCH_USER_FAILURE',
                payload: error,
            });
        }

    };

    const getRepositories = async (name) => {

        dispatch({
            type: 'FETCH_REPOSITORIES_REQUEST',
        });

        try {
            const response = await axios.get(
                url(`/users/${name}/repos?per_page=10&`),
            );

            dispatch({
                type: 'FETCH_REPOSITORIES_SUCCESS',
                payload: response.data,
            });
        } catch (error) {
            dispatch({
                type: 'FETCH_REPOSITORIES_FAILURE',
                payload: error,
            });
        }

    };

    const clearUsers = () => dispatch({ type: 'CLEAR_USERS' });

    const { isLoading, user, users, repositories } = state;

    return (
        <GithubContext.Provider value={{
            search, getUser, getRepositories, clearUsers,
            isLoading, user, users, repositories,
        }}>
            {children}
        </GithubContext.Provider>
    );
}

export default GithubState;